t  1 1
t  1 1
t  3 4
w  0 1 16837695654658277206  15815996774348270660
t  5 4
w  0 1 16837695654658277206  15815996774348270660
t  3 4
w  0 1 5277646471028173880  15815996774348270660
t  4 4
w  0 1 16837695654658277206  15815996774348270660
t  5 4
w  0 1 5277646471028173880  5277646471028173880
t  5 4
w  0 1 16837695655910571667  15815996774348270660
t  3 4
w  0 1 16837695655910571667  15815996774348270660
t  3 4
t  4 4
w  0 1 5277646471028173880  5277646471028173880
t  4 4
w  0 1 16837695655910571667  15815996774348270660
t  2 4
w  0 1 16837695654658277206  15815996774348270660
t  5 4
t  3 4
w  0 1 16837695655910571667  15815996774348270660
t  3 4
t  4 4
t  2 4
w  0 1 5277646471028173880  5277646471028173880
t  5 4
w  0 1 16837695655910571667  15815996774348270660
t  3 4
w  0 1 16837695655910571667  15815996774348270660
t  2 4
w  0 1 5277646471145575703  15815996774348270660
t  3 3
t  3 3
w  0 2 16837695655910571667  15815996774348270660 5277646471145575703
t  4 3
w  1 2 16837695655910571667  15815996774348270660 5277646471145575703
t  4 3
t  3 3
t  3 3
w  0 2 16837695655910571667  15815996774348270660 5277646471145575703
t  3 3
t  5 3
t  5 3
w  1 2 16837695655910571667  15815996774348270660 5277646471145575703
b 42



int data = 0;
atomic<int> flag = 1;   // non atomic write

// thread1
data = 1;
flag.store(1, order); // rel

// thread 2
while(flag != 1)  // acq  
data = 2;

// data=1 --hb--> data= 2       ok
// flag=0 hb load hb data=2
// flag=0 hb data=1     race